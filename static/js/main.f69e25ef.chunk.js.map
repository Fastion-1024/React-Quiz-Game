{"version":3,"sources":["lib/enums.ts","hooks/mainContext.tsx","components/MainMenu.tsx","components/Options.tsx","hooks/useFetch.ts","components/QuestionCard.tsx","components/ResultsCard.tsx","components/StandardQuiz.tsx","lib/utils.ts","components/App.tsx","index.tsx"],"names":["modes","components","AppContext","React","createContext","useMainContext","useContext","AppProvider","children","useState","Main_Menu","activeComponent","setActiveComponent","category","difficulty","type","amount","gameOptions","setGameOptions","fetchURL","setFetchURL","getFetchURL","paramsObj","encode","params","URLSearchParams","console","log","Provider","value","navigateToMainMenu","navigateToOptions","Options","navigateToStandardGame","Standard_Quiz","navigateToScoreGame","Score_Quiz","navigateToTimeGame","Time_Quiz","navigateToMarathonGame","Marathon_Quiz","updateGameOptions","MainMenu","className","onClick","options","setOptions","htmlFor","id","onChange","e","target","parseInt","useFetch","url","cache","useRef","cancelRequest","initialState","error","undefined","data","useReducer","state","action","payload","dispatch","useEffect","fetchData","a","current","fetch","response","ok","Error","statusText","json","QuestionCard","question","userAnswer","callback","shuffled_answers","map","item","index","disabled","currentTarget","ResultsCard","score","userAnswers","answer","correctAnswer","StandardQuiz","questions","setQuestions","setUserAnswers","setIndex","setScore","gameOver","setGameOver","decodedQuestions","results","decodeURIComponent","correct_answer","incorrect_answers","decodeURIQuestions","array","sort","Math","random","message","length","correct","prev","answerObj","setTimeout","newIndex","nextQuestion","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f69e25ef.chunk.js","sourcesContent":["enum modes {\r\n    Standard = 'STANDARD',\r\n    Time = 'TIME',\r\n    Score = 'SCORE',\r\n    Marathon = 'MARATHON',\r\n}\r\n\r\nenum components {\r\n    Main_Menu = 'Main_Menu',\r\n    Options = 'Options',\r\n    Standard_Quiz = 'Standard_Quiz',\r\n    Time_Quiz = 'Time_Quiz',\r\n    Score_Quiz = 'Score_Quiz',\r\n    Marathon_Quiz = 'Marathon_Quiz',\r\n}\r\n\r\nexport { modes, components };\r\n","import React, { useContext, useState } from 'react';\r\nimport { components } from '../lib/enums';\r\nimport { IGameOptions } from '../lib/interfaces';\r\n\r\ntype ContextType = {\r\n    activeComponent: components;\r\n    gameOptions: IGameOptions;\r\n    fetchURL: string;\r\n    navigateToMainMenu: () => void;\r\n    navigateToOptions: () => void;\r\n    navigateToStandardGame: () => void;\r\n    navigateToTimeGame: () => void;\r\n    navigateToScoreGame: () => void;\r\n    navigateToMarathonGame: () => void;\r\n    updateGameOptions: (gameOptions: IGameOptions) => void;\r\n};\r\n\r\nconst AppContext = React.createContext<ContextType | null>(null);\r\n\r\nconst AppProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n    const [activeComponent, setActiveComponent] = useState(components.Main_Menu);\r\n    const [gameOptions, setGameOptions] = useState<IGameOptions>({\r\n        category: '',\r\n        difficulty: '',\r\n        type: '',\r\n        amount: 10,\r\n    });\r\n    const [fetchURL, setFetchURL] = useState(\r\n        'https://opentdb.com/api.php?amount=10&encode=url3986'\r\n    );\r\n\r\n    const navigateToMainMenu = (): void => {\r\n        setActiveComponent(components.Main_Menu);\r\n    };\r\n\r\n    const navigateToOptions = (): void => {\r\n        setActiveComponent(components.Options);\r\n    };\r\n\r\n    const navigateToStandardGame = (): void => {\r\n        setActiveComponent(components.Standard_Quiz);\r\n    };\r\n\r\n    const navigateToTimeGame = (): void => {\r\n        setActiveComponent(components.Time_Quiz);\r\n    };\r\n\r\n    const navigateToScoreGame = (): void => {\r\n        setActiveComponent(components.Score_Quiz);\r\n    };\r\n\r\n    const navigateToMarathonGame = (): void => {\r\n        setActiveComponent(components.Marathon_Quiz);\r\n    };\r\n\r\n    const updateGameOptions = (gameOptions: IGameOptions) => {\r\n        setGameOptions(gameOptions);\r\n        setFetchURL(getFetchURL(gameOptions));\r\n    };\r\n\r\n    const getFetchURL = (gameOptions: IGameOptions): string => {\r\n        let paramsObj = {};\r\n\r\n        if (gameOptions.category) paramsObj = { ...paramsObj, category: gameOptions.category };\r\n        if (gameOptions.category) paramsObj = { ...paramsObj, difficulty: gameOptions.difficulty };\r\n        if (gameOptions.category) paramsObj = { ...paramsObj, type: gameOptions.type };\r\n        paramsObj = { ...paramsObj, amount: gameOptions.amount };\r\n        paramsObj = { ...paramsObj, encode: 'url3986' };\r\n        const params = new URLSearchParams(paramsObj);\r\n\r\n        console.log(`https://opentdb.com/api.php?${params}`);\r\n        return `https://opentdb.com/api.php?${params}`;\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                activeComponent,\r\n                gameOptions,\r\n                fetchURL,\r\n                navigateToMainMenu,\r\n                navigateToOptions,\r\n                navigateToStandardGame,\r\n                navigateToScoreGame,\r\n                navigateToTimeGame,\r\n                navigateToMarathonGame,\r\n                updateGameOptions,\r\n            }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMainContext = () => {\r\n    return useContext(AppContext) as ContextType;\r\n};\r\n\r\nexport default AppProvider;\r\n","import { modes } from '../lib/enums';\r\nimport { useMainContext } from '../hooks/mainContext';\r\n\r\nconst MainMenu: React.FC = () => {\r\n    const {\r\n        navigateToStandardGame,\r\n        navigateToTimeGame,\r\n        navigateToScoreGame,\r\n        navigateToMarathonGame,\r\n        navigateToOptions,\r\n    } = useMainContext();\r\n\r\n    return (\r\n        <section className='main-menu'>\r\n            <h1>Trivia Quiz</h1>\r\n            <button onClick={navigateToStandardGame}>Standard</button>\r\n            <button onClick={navigateToTimeGame}>Time Attack</button>\r\n            <button onClick={navigateToScoreGame}>Score</button>\r\n            <button onClick={navigateToMarathonGame}>Marathon</button>\r\n            <button onClick={navigateToOptions}>Options</button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","import { useState } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\n\r\nconst Options: React.FC = () => {\r\n    const { gameOptions, navigateToMainMenu, updateGameOptions } = useMainContext();\r\n    const [options, setOptions] = useState(gameOptions);\r\n\r\n    const returnToMainMenu = () => {\r\n        updateGameOptions(options);\r\n        navigateToMainMenu();\r\n    };\r\n\r\n    return (\r\n        <section className='mode-options'>\r\n            <div>\r\n                <label htmlFor='categories'>Select Category</label>\r\n                <select\r\n                    id='categories'\r\n                    value={options.category}\r\n                    onChange={(e) => setOptions({ ...options, category: e.target.value })}>\r\n                    <option value=''>Any Category</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='difficulty'>Select Difficulty</label>\r\n                <select\r\n                    id='difficulty'\r\n                    value={options.difficulty}\r\n                    onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}>\r\n                    <option value=''>Any Difficulty</option>\r\n                    <option value='easy'>Easy</option>\r\n                    <option value='medium'>Medium</option>\r\n                    <option value='hard'>Hard</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='type'>Select Type</label>\r\n                <select\r\n                    id='type'\r\n                    value={options.type}\r\n                    onChange={(e) => setOptions({ ...options, type: e.target.value })}>\r\n                    <option value=''>Any Type</option>\r\n                    <option value='multiple'>Multiple Choice</option>\r\n                    <option value='boolean'>True / False</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='number'>Select Number of Questions</label>\r\n                <select\r\n                    id='number'\r\n                    value={options.amount}\r\n                    onChange={(e) =>\r\n                        setOptions({\r\n                            ...options,\r\n                            amount: parseInt(e.target.value),\r\n                        })\r\n                    }>\r\n                    <option value={10}>10</option>\r\n                    <option value={15}>15</option>\r\n                    <option value={20}>20</option>\r\n                </select>\r\n            </div>\r\n            <button onClick={returnToMainMenu}>Back</button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Options;\r\n","import { useRef, useEffect, useReducer } from 'react';\r\n\r\n// -- Interfaces & Types --\r\ninterface IState<T> {\r\n    data?: T;\r\n    error?: Error;\r\n}\r\n\r\ntype Cache<T> = { [url: string]: T };\r\n\r\n// discriminated union type\r\ntype Action<T> =\r\n    | { type: 'loading' }\r\n    | { type: 'fetched'; payload: T }\r\n    | { type: 'error'; payload: Error };\r\n\r\nconst useFetch = <T = unknown>(url?: string, options?: RequestInit): IState<T> => {\r\n    const cache = useRef<Cache<T>>({});\r\n\r\n    // Used to prevent state update if the component is unmounted\r\n    const cancelRequest = useRef<boolean>(false);\r\n\r\n    const initialState: IState<T> = {\r\n        error: undefined,\r\n        data: undefined,\r\n    };\r\n\r\n    // Keep state logic separated\r\n    const fetchReducer = (state: IState<T>, action: Action<T>): IState<T> => {\r\n        switch (action.type) {\r\n            case 'loading':\r\n                return { ...initialState };\r\n\r\n            case 'fetched':\r\n                return { ...initialState, data: action.payload };\r\n\r\n            case 'error':\r\n                return { ...initialState, error: action.payload };\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        // Do nothing if the url is null\r\n        if (!url) return;\r\n\r\n        // Create our async fetch function\r\n        const fetchData = async () => {\r\n            dispatch({ type: 'loading' });\r\n\r\n            // If a cache exists for this url, return it\r\n            if (cache.current[url]) {\r\n                dispatch({ type: 'fetched', payload: cache.current[url] });\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(url, options);\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const data = (await response.json()) as T;\r\n                cache.current[url] = data;\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'fetched', payload: data });\r\n            } catch (error) {\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'error', payload: error as Error });\r\n            }\r\n        };\r\n\r\n        // invoke fetch function after construction;\r\n        void fetchData();\r\n        /* \r\n            Use the cleanup function for avoiding a possible\r\n            state update after the component unmounts\r\n        */\r\n        return () => {\r\n            cancelRequest.current = true;\r\n        };\r\n    }, [url]);\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetch;\r\n","import React from 'react';\r\nimport { IAnswer, IQuestion } from '../lib/interfaces';\r\n\r\ninterface IProps {\r\n    question: IQuestion;\r\n    userAnswer: IAnswer | undefined;\r\n    callback: (answer: string) => void;\r\n}\r\n\r\nconst QuestionCard: React.FC<IProps> = ({ question, userAnswer, callback }) => {\r\n    return (\r\n        <div>\r\n            <h1>{question.question}</h1>\r\n            {question.shuffled_answers?.map((item, index) => {\r\n                return (\r\n                    <button\r\n                        key={index}\r\n                        value={item}\r\n                        disabled={userAnswer ? true : false}\r\n                        onClick={(e) => callback(e.currentTarget.value)}>\r\n                        {item}\r\n                    </button>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from 'react';\r\nimport { IAnswer } from '../lib/interfaces';\r\n\r\ninterface IProps {\r\n    score: number;\r\n    userAnswers: IAnswer[];\r\n}\r\n\r\nconst ResultsCard: React.FC<IProps> = ({ score, userAnswers }) => {\r\n    return (\r\n        <div>\r\n            <h2>Your Final Score</h2>\r\n            <h3>{score}</h3>\r\n            {userAnswers.map((item, index) => {\r\n                return (\r\n                    <div key={index}>\r\n                        <h3>Question:- {item.question}</h3>\r\n                        <h4>Your Answer:- {item.answer}</h4>\r\n                        <h4>Correct Answer:- {item.correctAnswer}</h4>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { IQuestion, IQuestions, IAnswer } from '../lib/interfaces';\r\nimport { decodeURIQuestions, shuffleArray } from '../lib/utils';\r\nimport QuestionCard from './QuestionCard';\r\nimport ResultsCard from './ResultsCard';\r\n\r\ninterface IProps {\r\n    url: string;\r\n}\r\n\r\nconst StandardQuiz: React.FC<IProps> = ({ url }) => {\r\n    const { data, error } = useFetch<IQuestions>(url);\r\n    const [questions, setQuestions] = useState<IQuestion[]>();\r\n    const [userAnswers, setUserAnswers] = useState<IAnswer[]>([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            console.log('Questions Updated');\r\n\r\n            const decodedQuestions = decodeURIQuestions(data);\r\n            setQuestions(\r\n                decodedQuestions.map((question) => {\r\n                    return {\r\n                        ...question,\r\n                        shuffled_answers: shuffleArray([\r\n                            ...question.incorrect_answers,\r\n                            question.correct_answer,\r\n                        ]),\r\n                    };\r\n                })\r\n            );\r\n        }\r\n    }, [data]);\r\n\r\n    const nextQuestion = () => {\r\n        const newIndex = index + 1;\r\n\r\n        if (questions && newIndex < questions.length) {\r\n            setIndex(newIndex);\r\n        } else {\r\n            setGameOver(true);\r\n        }\r\n    };\r\n\r\n    const checkAnswer = (answer: string) => {\r\n        // Guard clause for possible undefined value\r\n        if (!questions) return;\r\n\r\n        const correct = questions[index].correct_answer === answer;\r\n        if (correct) setScore((prev) => prev + 1);\r\n\r\n        const answerObj = {\r\n            question: questions[index].question,\r\n            answer,\r\n            correct,\r\n            correctAnswer: questions[index].correct_answer,\r\n        };\r\n        setUserAnswers((prev) => [...prev, answerObj]);\r\n\r\n        setTimeout(() => {\r\n            nextQuestion();\r\n        }, 500);\r\n    };\r\n\r\n    // Render\r\n    if (!data || !questions) {\r\n        return (\r\n            <div>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div>\r\n                <h1>{error.message}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (gameOver) {\r\n        return (\r\n            <div>\r\n                <ResultsCard score={score} userAnswers={userAnswers} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n                {index + 1} / {questions.length}\r\n            </h4>\r\n            <h4>Score:- {score}</h4>\r\n            <QuestionCard\r\n                question={questions[index]}\r\n                userAnswer={userAnswers[index]}\r\n                callback={checkAnswer}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StandardQuiz;\r\n","import { IQuestion, IQuestions } from './interfaces';\r\n\r\nexport const shuffleArray = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n\r\nexport const decodeURIQuestions = (questions: IQuestions): IQuestion[] => {\r\n    return questions.results.map((question) => {\r\n        return {\r\n            ...question,\r\n            category: decodeURIComponent(question.category),\r\n            question: decodeURIComponent(question.question),\r\n            correct_answer: decodeURIComponent(question.correct_answer),\r\n            incorrect_answers: question.incorrect_answers.map((answer) => {\r\n                return decodeURIComponent(answer);\r\n            }),\r\n        };\r\n    });\r\n};\r\n","import MainMenu from './MainMenu';\r\nimport Options from './Options';\r\nimport StandardQuiz from './StandardQuiz';\r\nimport { components } from '../lib/enums';\r\nimport { useMainContext } from '../hooks/mainContext';\r\n\r\n// The navigator of the app.\r\n// Displays the correct component based on the activeComponent state.\r\nfunction App() {\r\n    const { activeComponent, fetchURL } = useMainContext();\r\n    return (\r\n        <main>\r\n            {activeComponent === components.Main_Menu && <MainMenu />}\r\n            {activeComponent === components.Options && <Options />}\r\n            {activeComponent === components.Standard_Quiz && <StandardQuiz url={fetchURL} />}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport AppProvider from './hooks/mainContext';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}