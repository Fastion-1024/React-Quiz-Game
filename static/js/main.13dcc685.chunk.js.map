{"version":3,"sources":["lib/enums.ts","hooks/mainContext.tsx","components/MainMenu.tsx","hooks/useFetch.ts","components/Options.tsx","hooks/useDecodeURIFetch.ts","lib/utils.ts","components/QuestionCard.tsx","components/ResultsCard.tsx","hooks/useTimer.ts","components/TimerBar.tsx","components/LifeBar.tsx","components/Quiz.tsx","components/App.tsx","index.tsx"],"names":["modes","components","AppContext","React","createContext","useMainContext","useContext","AppProvider","children","useState","Main_Menu","activeComponent","setActiveComponent","category","difficulty","type","amount","gameOptions","setGameOptions","fetchURL","setFetchURL","Standard","gameMode","setGameMode","getFetchURL","paramsObj","encode","params","URLSearchParams","console","log","Provider","value","navigateToMainMenu","navigateToOptions","Options","navigateToQuiz","mode","Quiz","Marathon","updateGameOptions","MainMenu","setMode","className","Time","Error","getIcon","onClick","onMouseEnter","focusable","useFetch","url","options","cache","useRef","cancelRequest","initialState","error","undefined","data","useReducer","state","action","payload","dispatch","useEffect","fetchData","a","current","fetch","response","ok","statusText","json","setOptions","htmlFor","id","onChange","e","target","trivia_categories","map","name","hidden","checked","parseInt","useDecodeURIFetch","decodedData","setDecodedData","decoded","results","question","decodeURIComponent","correct_answer","incorrect_answers","answer","item","shuffled_answers","array","sort","Math","random","QuestionCard","userAnswer","questionNum","questionCount","callback","index","disabled","currentTarget","correctAnswer","charAt","ResultsCard","score","userAnswers","navigateBack","correct","useTimer","duration","timeRemaining","setTimeRemaining","isRunning","setIsRunning","timerRef","callbackRef","stop","window","setInterval","time","clearInterval","TimerBar","currentTime","widthPercent","maxTime","style","width","LifeBar","currentLives","maxLives","lives","Array","from","keys","life","questions","setIndex","setScore","gameOver","setGameOver","setUserAnswers","checkAnswer","startTimer","resetTimer","setLives","addScore","newLives","answerObj","prev","setTimeout","nextQuestion","newIndex","length","max","message","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13dcc685.chunk.js","sourcesContent":["enum modes {\r\n    Standard = 'STANDARD',\r\n    Time = 'TIME',\r\n    Marathon = 'MARATHON',\r\n}\r\n\r\nenum components {\r\n    Main_Menu = 'Main_Menu',\r\n    Options = 'Options',\r\n    Quiz = 'Quiz',\r\n}\r\n\r\nexport { modes, components };\r\n","import React, { useContext, useState } from 'react';\r\nimport { components } from '../lib/enums';\r\nimport { IGameOptions } from '../lib/interfaces';\r\nimport { modes } from '../lib/enums';\r\n\r\ntype ContextType = {\r\n    activeComponent: components;\r\n    gameOptions: IGameOptions;\r\n    fetchURL: string;\r\n    gameMode: modes;\r\n    navigateToMainMenu: () => void;\r\n    navigateToOptions: () => void;\r\n    navigateToQuiz: (mode: modes) => void;\r\n    updateGameOptions: (gameOptions: IGameOptions) => void;\r\n};\r\n\r\nconst AppContext = React.createContext<ContextType | null>(null);\r\n\r\nconst AppProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n    const [activeComponent, setActiveComponent] = useState(components.Main_Menu);\r\n    const [gameOptions, setGameOptions] = useState<IGameOptions>({\r\n        category: '',\r\n        difficulty: '',\r\n        type: '',\r\n        amount: 10,\r\n    });\r\n    const [fetchURL, setFetchURL] = useState(\r\n        'https://opentdb.com/api.php?amount=10&encode=url3986'\r\n    );\r\n    const [gameMode, setGameMode] = useState(modes.Standard);\r\n\r\n    const navigateToMainMenu = (): void => {\r\n        setActiveComponent(components.Main_Menu);\r\n    };\r\n\r\n    const navigateToOptions = (): void => {\r\n        setActiveComponent(components.Options);\r\n    };\r\n\r\n    const navigateToQuiz = (mode: modes): void => {\r\n        setActiveComponent(components.Quiz);\r\n        setGameMode(mode);\r\n\r\n        if (mode === modes.Marathon) {\r\n            setFetchURL(\r\n                getFetchURL({ ...gameOptions, category: '', type: 'multiple', amount: 50 })\r\n            );\r\n        }\r\n    };\r\n\r\n    const updateGameOptions = (gameOptions: IGameOptions) => {\r\n        setGameOptions(gameOptions);\r\n        setFetchURL(getFetchURL(gameOptions));\r\n    };\r\n\r\n    const getFetchURL = (gameOptions: IGameOptions): string => {\r\n        let paramsObj = {};\r\n\r\n        if (gameOptions.category) paramsObj = { ...paramsObj, category: gameOptions.category };\r\n        if (gameOptions.difficulty)\r\n            paramsObj = { ...paramsObj, difficulty: gameOptions.difficulty };\r\n        if (gameOptions.type) paramsObj = { ...paramsObj, type: gameOptions.type };\r\n        paramsObj = { ...paramsObj, amount: gameOptions.amount };\r\n        paramsObj = { ...paramsObj, encode: 'url3986' };\r\n        const params = new URLSearchParams(paramsObj);\r\n\r\n        console.log(`https://opentdb.com/api.php?${params}`);\r\n        return `https://opentdb.com/api.php?${params}`;\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                activeComponent,\r\n                gameOptions,\r\n                fetchURL,\r\n                gameMode,\r\n                navigateToMainMenu,\r\n                navigateToOptions,\r\n                navigateToQuiz,\r\n                updateGameOptions,\r\n            }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMainContext = () => {\r\n    return useContext(AppContext) as ContextType;\r\n};\r\n\r\nexport default AppProvider;\r\n","import { useState } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\nimport { modes } from '../lib/enums';\r\nimport { FaClipboardList, FaCog, FaQuestion, FaRunning } from 'react-icons/fa';\r\nimport { TiStopwatch } from 'react-icons/ti';\r\n\r\nconst MainMenu: React.FC = () => {\r\n    const { navigateToQuiz, navigateToOptions } = useMainContext();\r\n    const [mode, setMode] = useState(modes.Standard);\r\n\r\n    const getIcon = () => {\r\n        switch (mode) {\r\n            case modes.Standard:\r\n                return <FaQuestion className='w-full h-full p-14 text-white' />;\r\n\r\n            case modes.Time:\r\n                return (\r\n                    <TiStopwatch className='w-full h-full p-14 text-white transform -rotate-12' />\r\n                );\r\n\r\n            case modes.Marathon:\r\n                return <FaRunning className='w-full h-full p-14 text-white' />;\r\n\r\n            default:\r\n                throw Error('No matching mode found!');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className='main-menu-container'>\r\n            <div className='absolute top-1/2 left-0 z-20 transform -translate-y-1/2 -translate-x-20 sm:-translate-x-24 md:-translate-x-28 h-60 w-60 sm:h-72 sm:w-72 md:h-88 md:w-88 rounded-full border-12 sm:border-16 md:border-20 border-gray-800 bg-gray-500 '>\r\n                {getIcon()}\r\n            </div>\r\n            <h1 className='text-center text-5xl sm:text-6xl md:text-7xl text-white font-black filter text-shadow-multi my-8'>\r\n                Trivia Quiz\r\n            </h1>\r\n            <div className='absolute top-1/2 left-20 md:left-32 z-10 w-2/3 transform -translate-y-1/2 flex flex-col space-y-4 sm:space-y-6 md:space-y-8 md:space-y-10'>\r\n                <button\r\n                    className='btn-standard'\r\n                    onClick={() => navigateToQuiz(modes.Standard)}\r\n                    onMouseEnter={() => setMode(modes.Standard)}>\r\n                    Standard\r\n                </button>\r\n                <button\r\n                    className='btn-standard'\r\n                    onClick={() => navigateToQuiz(modes.Time)}\r\n                    onMouseEnter={() => setMode(modes.Time)}>\r\n                    Timed\r\n                </button>\r\n                <button\r\n                    className='btn-standard'\r\n                    onClick={() => navigateToQuiz(modes.Marathon)}\r\n                    onMouseEnter={() => setMode(modes.Marathon)}>\r\n                    Marathon\r\n                </button>\r\n            </div>\r\n            <div className='absolute bottom-0 w-full flex justify-between p-5 z-10'>\r\n                <button\r\n                    className='text-5xl sm:text-6xl md:text-7xl text-white'\r\n                    onClick={navigateToOptions}>\r\n                    <FaCog aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Options</span>\r\n                </button>\r\n                <button\r\n                    className='text-5xl sm:text-6xl md:text-7xl text-white'\r\n                    onClick={navigateToOptions}>\r\n                    <FaClipboardList aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Score</span>\r\n                </button>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","import { useRef, useEffect, useReducer } from 'react';\r\n\r\n// -- Interfaces & Types --\r\ninterface IState<T> {\r\n    data?: T;\r\n    error?: Error;\r\n}\r\n\r\ntype Cache<T> = { [url: string]: T };\r\n\r\n// discriminated union type\r\ntype Action<T> =\r\n    | { type: 'loading' }\r\n    | { type: 'fetched'; payload: T }\r\n    | { type: 'error'; payload: Error };\r\n\r\nconst useFetch = <T = unknown>(url?: string, options?: RequestInit): IState<T> => {\r\n    const cache = useRef<Cache<T>>({});\r\n\r\n    // Used to prevent state update if the component is unmounted\r\n    const cancelRequest = useRef<boolean>(false);\r\n\r\n    const initialState: IState<T> = {\r\n        error: undefined,\r\n        data: undefined,\r\n    };\r\n\r\n    // Keep state logic separated\r\n    const fetchReducer = (state: IState<T>, action: Action<T>): IState<T> => {\r\n        switch (action.type) {\r\n            case 'loading':\r\n                return { ...initialState };\r\n\r\n            case 'fetched':\r\n                return { ...initialState, data: action.payload };\r\n\r\n            case 'error':\r\n                return { ...initialState, error: action.payload };\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        // Do nothing if the url is null\r\n        if (!url) return;\r\n\r\n        // Create our async fetch function\r\n        const fetchData = async () => {\r\n            dispatch({ type: 'loading' });\r\n\r\n            // If a cache exists for this url, return it\r\n            if (cache.current[url]) {\r\n                dispatch({ type: 'fetched', payload: cache.current[url] });\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(url, options);\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const data = (await response.json()) as T;\r\n                cache.current[url] = data;\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'fetched', payload: data });\r\n            } catch (error) {\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'error', payload: error as Error });\r\n            }\r\n        };\r\n\r\n        // invoke fetch function after construction;\r\n        void fetchData();\r\n        /* \r\n            Use the cleanup function for avoiding a possible\r\n            state update after the component unmounts\r\n        */\r\n        return () => {\r\n            cancelRequest.current = true;\r\n        };\r\n    }, [url]);\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetch;\r\n","import { useState } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { ICategories } from '../lib/interfaces';\r\nimport { RiArrowGoBackFill } from 'react-icons/ri';\r\n\r\nconst Options: React.FC = () => {\r\n    const { data, error } = useFetch<ICategories>('https://opentdb.com/api_category.php');\r\n    const { gameOptions, navigateToMainMenu, updateGameOptions } = useMainContext();\r\n    const [options, setOptions] = useState(gameOptions);\r\n\r\n    const returnToMainMenu = () => {\r\n        updateGameOptions(options);\r\n        navigateToMainMenu();\r\n    };\r\n\r\n    return (\r\n        <section className='options-container'>\r\n            <h1 className='text-center text-5xl sm:text-6xl md:text-7xl text-white font-black filter text-shadow-multi my-4 sm:my-6'>\r\n                Options\r\n            </h1>\r\n\r\n            {/* Category */}\r\n            <label\r\n                className='block text-center text-2xl sm:text-3xl mt-8 mb-2 sm:mb-4 text-gray-800 font-bold'\r\n                htmlFor='categories'>\r\n                Select Category\r\n            </label>\r\n            <select\r\n                className='block py-2 text-center rounded-lg text-xl bg-gray-300 mx-auto max-w-full border-2 border-gray-800'\r\n                id='categories'\r\n                value={options.category}\r\n                onChange={(e) => setOptions({ ...options, category: e.target.value })}>\r\n                <option value=''>Any Category</option>\r\n                {data &&\r\n                    data.trivia_categories.map((category) => {\r\n                        return <option value={category.id}>{category.name}</option>;\r\n                    })}\r\n            </select>\r\n\r\n            {/* Difficulty */}\r\n            <h2 className='text-center text-2xl sm:text-3xl mt-8 mb-2 sm:mb-4 text-gray-800 font-bold'>\r\n                Select Difficulty\r\n            </h2>\r\n            <div className='flex justify-center items-center space-x-1'>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='difficulty'\r\n                        id='difficultyAny'\r\n                        value=''\r\n                        hidden\r\n                        checked={options.difficulty === ''}\r\n                        onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='difficultyAny'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Any\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='difficulty'\r\n                        id='difficultyEasy'\r\n                        value='easy'\r\n                        hidden\r\n                        checked={options.difficulty === 'easy'}\r\n                        onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='difficultyEasy'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Easy\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='difficulty'\r\n                        id='difficultyMedium'\r\n                        value='medium'\r\n                        hidden\r\n                        checked={options.difficulty === 'medium'}\r\n                        onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='difficultyMedium'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Medium\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='difficulty'\r\n                        id='difficultyHard'\r\n                        value='hard'\r\n                        hidden\r\n                        checked={options.difficulty === 'hard'}\r\n                        onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='difficultyHard'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Hard\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Type */}\r\n            <h2 className='text-center text-2xl sm:text-3xl mt-8 mb-2 sm:mb-4 text-gray-800 font-bold'>\r\n                Select Type\r\n            </h2>\r\n            <div className='flex justify-center items-center space-x-1'>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='type'\r\n                        id='typeAny'\r\n                        value=''\r\n                        hidden\r\n                        checked={options.type === ''}\r\n                        onChange={(e) => setOptions({ ...options, type: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='typeAny'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Any\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='type'\r\n                        id='typeMultiple'\r\n                        value='multiple'\r\n                        hidden\r\n                        checked={options.type === 'multiple'}\r\n                        onChange={(e) => setOptions({ ...options, type: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='typeMultiple'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        Multiple Choice\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='type'\r\n                        id='typeBoolean'\r\n                        value='boolean'\r\n                        hidden\r\n                        checked={options.type === 'boolean'}\r\n                        onChange={(e) => setOptions({ ...options, type: e.target.value })}\r\n                    />\r\n                    <label\r\n                        htmlFor='typeBoolean'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        True / False\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            {/* No of Questions */}\r\n\r\n            <h2 className='text-center text-2xl sm:text-3xl mt-8 mb-2 sm:mb-4 text-gray-800 font-bold'>\r\n                Select Number of Questions\r\n            </h2>\r\n            <div className='flex justify-center items-center space-x-1'>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='amount'\r\n                        id='amountTen'\r\n                        value={10}\r\n                        hidden\r\n                        checked={options.amount === 10}\r\n                        onChange={(e) =>\r\n                            setOptions({ ...options, amount: parseInt(e.target.value) })\r\n                        }\r\n                    />\r\n                    <label\r\n                        htmlFor='amountTen'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        10\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='amount'\r\n                        id='amountFifteen'\r\n                        value={15}\r\n                        hidden\r\n                        checked={options.amount === 15}\r\n                        onChange={(e) =>\r\n                            setOptions({ ...options, amount: parseInt(e.target.value) })\r\n                        }\r\n                    />\r\n                    <label\r\n                        htmlFor='amountFifteen'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        15\r\n                    </label>\r\n                </div>\r\n                <div className='inline-flex rounded-lg'>\r\n                    <input\r\n                        type='radio'\r\n                        name='amount'\r\n                        id='amountTwenty'\r\n                        value={20}\r\n                        hidden\r\n                        checked={options.amount === 20}\r\n                        onChange={(e) =>\r\n                            setOptions({ ...options, amount: parseInt(e.target.value) })\r\n                        }\r\n                    />\r\n                    <label\r\n                        htmlFor='amountTwenty'\r\n                        className='radio disable-select text-center text-l sm:text-xl self-center py-2 px-4 rounded-lg cursor-pointer hover:opacity-75 bg-gray-300 border-2 border-gray-800'>\r\n                        20\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Back Navigation */}\r\n            <button\r\n                className='absolute bottom-5 left-5 z-10 text-5xl sm:text-6xl md:text-7xl text-white'\r\n                onClick={returnToMainMenu}>\r\n                <RiArrowGoBackFill aria-hidden={true} focusable={false} />\r\n                <span className='visually-hidden'>Back</span>\r\n            </button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Options;\r\n","import React, { useEffect, useState } from 'react';\r\nimport useFetch from './useFetch';\r\nimport { decodeURIQuestions, shuffleArray } from '../lib/utils';\r\nimport { IQuestion, IQuestions } from '../lib/interfaces';\r\n\r\nconst useDecodeURIFetch = (url?: string, options?: RequestInit) => {\r\n    const { data, error } = useFetch<IQuestions>(url, options);\r\n    const [decodedData, setDecodedData] = useState<IQuestion[]>();\r\n\r\n    useEffect(() => {\r\n        if (!data) return;\r\n\r\n        const decoded = decodeURIQuestions(data);\r\n        setDecodedData(\r\n            decoded.map((item) => {\r\n                return {\r\n                    ...item,\r\n                    shuffled_answers: shuffleArray([\r\n                        ...item.incorrect_answers,\r\n                        item.correct_answer,\r\n                    ]),\r\n                };\r\n            })\r\n        );\r\n    }, [data]);\r\n\r\n    return [decodedData, error] as const;\r\n};\r\n\r\nexport default useDecodeURIFetch;\r\n","import { IQuestion, IQuestions } from './interfaces';\r\n\r\nexport const shuffleArray = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n\r\nexport const decodeURIQuestions = (questions: IQuestions): IQuestion[] => {\r\n    return questions.results.map((question) => {\r\n        return {\r\n            ...question,\r\n            category: decodeURIComponent(question.category),\r\n            question: decodeURIComponent(question.question),\r\n            correct_answer: decodeURIComponent(question.correct_answer),\r\n            incorrect_answers: question.incorrect_answers.map((answer) => {\r\n                return decodeURIComponent(answer);\r\n            }),\r\n        };\r\n    });\r\n};\r\n","import React from 'react';\r\nimport { IAnswer, IQuestion } from '../lib/interfaces';\r\nimport { FaCheck, FaTimes } from 'react-icons/fa';\r\n\r\ninterface IProps {\r\n    question: IQuestion;\r\n    userAnswer: IAnswer | undefined;\r\n    questionNum: number;\r\n    questionCount: number;\r\n    callback: (answer: string) => void;\r\n}\r\n\r\nconst QuestionCard: React.FC<IProps> = ({\r\n    question,\r\n    userAnswer,\r\n    questionNum,\r\n    questionCount,\r\n    callback,\r\n}) => {\r\n    const letters = 'ABCD';\r\n\r\n    return (\r\n        <div className='flex flex-col justify-center h-full'>\r\n            <h1 className='w-full sm:w-4/5 mx-auto p-4 md:p-6 break-words text-center text-xl sm:text-2xl md:text-3xl font-bold sm:rounded-b-3xl bg-gray-800 text-gray-100'>\r\n                {question.question}\r\n            </h1>\r\n            <div className='flex flex-row justify-around w-1/2 mx-auto py-1 md:py-2 text-xl sm:text-2xl md:text-3xl rounded-b-full bg-gray-500 text-gray-100 text-shadow'>\r\n                <h4>\r\n                    {questionNum} / {questionCount}\r\n                </h4>\r\n            </div>\r\n            <div className='flex flex-col h-full space-y-10 z-10 justify-center items-center'>\r\n                {question.shuffled_answers?.map((item, index) => {\r\n                    return (\r\n                        <button\r\n                            className='w-4/5 sm:w-3/4 md:w-3/5 filter drop-shadow-md'\r\n                            key={index}\r\n                            value={item}\r\n                            disabled={userAnswer ? true : false}\r\n                            onClick={(e) => callback(e.currentTarget.value)}>\r\n                            <span className='block my-auto py-2 rounded-lg text-lg sm:text-xl text-shadow text-gray-100 font-semibold bg-gray-500'>\r\n                                {item}\r\n                            </span>\r\n\r\n                            {userAnswer ? (\r\n                                // Answer Indicator\r\n                                <span\r\n                                    // Correct bg color is green. Wrong bg color is red\r\n                                    className={`flex justify-cente text-white font-semibold h-6 w-1/2 mx-auto rounded-b-full ${\r\n                                        userAnswer.correctAnswer === item\r\n                                            ? 'bg-green-800'\r\n                                            : 'bg-red-800'\r\n                                    }`}>\r\n                                    {userAnswer.correctAnswer === item ? (\r\n                                        // Correct Icon\r\n                                        <FaCheck className='m-auto' />\r\n                                    ) : (\r\n                                        // Wrong Icon\r\n                                        <FaTimes className='m-auto' />\r\n                                    )}\r\n                                </span>\r\n                            ) : (\r\n                                // Default Indicator\r\n                                <span className='flex justify-center bg-gray-800 text-white font-semibold h-6 w-1/2 mx-auto rounded-b-full'>\r\n                                    {letters.charAt(index)}\r\n                                </span>\r\n                            )}\r\n                        </button>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from 'react';\r\nimport { IAnswer } from '../lib/interfaces';\r\nimport { RiArrowGoBackFill } from 'react-icons/ri';\r\n\r\ninterface IProps {\r\n    score: number;\r\n    userAnswers: IAnswer[];\r\n    navigateBack: () => void;\r\n}\r\n\r\nconst ResultsCard: React.FC<IProps> = ({ score, userAnswers, navigateBack }) => {\r\n    return (\r\n        <div className='results-container flex flex-col h-full'>\r\n            <h2 className='text-4xl md:text-6xl text-center my-4 font-black text-white filter text-shadow-multi'>\r\n                Results\r\n            </h2>\r\n            <div className='flex flex-col items-center space-y-5 px-4 md:px-5 overflow-y-auto pb-1/4vh'>\r\n                {userAnswers.map((item, index) => {\r\n                    return (\r\n                        <div className='text-center' key={index}>\r\n                            <h3 className='text-lg sm:text-xl md:text-2xl font-black mb-2 text-gray-800'>{`${\r\n                                index + 1\r\n                            }) ${item.question}`}</h3>\r\n                            <h4\r\n                                className={`text-md sm:text-lg md:text-xl font-bold ${\r\n                                    item.correct ? 'text-green-900' : 'text-red-900'\r\n                                }`}>\r\n                                Your Answer:- {item.answer}\r\n                            </h4>\r\n                            <h4 className='text-md sm:text-lg md:text-xl font-bold text-green-900'>\r\n                                Correct Answer:- {item.correctAnswer}\r\n                            </h4>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div className='absolute bottom-2 sm:bottom-6 left-0 w-full text-center text-gray-100 filter text-shadow-multi z-10'>\r\n                <h2 className='text-xl sm:text-3xl md:text-4xl font-bold'>Your Final Score</h2>\r\n                <h3 className='text-xl sm:text-3xl md:text-4xl font-bold'>{score}</h3>\r\n            </div>\r\n            <button\r\n                className='absolute bottom-2 left-2 z-10 text-5xl sm:text-6xl md:text-7xl text-white'\r\n                onClick={navigateBack}>\r\n                <RiArrowGoBackFill aria-hidden={true} focusable={false} />\r\n                <span className='visually-hidden'>Back</span>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsCard;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst useTimer = (duration: number, callback: () => void) => {\r\n    const [timeRemaining, setTimeRemaining] = useState(duration);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const timerRef = useRef<number>();\r\n    const callbackRef = useRef<() => void>();\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stop = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setTimeRemaining(duration);\r\n        setIsRunning(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        callbackRef.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (isRunning) {\r\n            timerRef.current = window.setInterval(() => {\r\n                const time = timeRemaining - 1;\r\n                if (time >= 0) {\r\n                    setTimeRemaining(time);\r\n                } else {\r\n                    callbackRef.current && callbackRef.current();\r\n                    stop();\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        return () => window.clearInterval(timerRef.current);\r\n    }, [isRunning, timeRemaining]);\r\n\r\n    return [timeRemaining, isRunning, start, stop, reset] as const;\r\n};\r\n\r\nexport default useTimer;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    currentTime: number;\r\n    maxTime: number;\r\n}\r\n\r\nconst TimerBar: React.FC<IProps> = ({ currentTime, maxTime }) => {\r\n    const widthPercent = (currentTime / maxTime) * 100;\r\n\r\n    return (\r\n        // Container / Background\r\n        <div className='h-3 sm:h-5 bg-gray-800 relative'>\r\n            <div\r\n                style={{ width: `${widthPercent}%` }}\r\n                className={`h-3 sm:h-5 bg-gray-500 transition-{width} duration-1000 ease-linear ${\r\n                    currentTime < 5 ? 'animate-pulse-full' : 'animate-none'\r\n                }`}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimerBar;\r\n","import React from 'react';\r\nimport { FaHeart, FaRegHeart } from 'react-icons/fa';\r\n\r\ninterface IProps {\r\n    currentLives: number;\r\n    maxLives: number;\r\n}\r\n\r\nconst LifeBar: React.FC<IProps> = ({ currentLives, maxLives }) => {\r\n    const lives = Array.from(Array(maxLives).keys());\r\n\r\n    return (\r\n        <div className='flex flex-row justify-center space-x-1 my-1 md:my-2 text-xl sm:text-2xl md:text-3xl'>\r\n            {lives.map((life, index) => {\r\n                return index < currentLives ? (\r\n                    <FaHeart className='fill-current text-red-500' />\r\n                ) : (\r\n                    <FaRegHeart className='fill-current text-red-500' />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LifeBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\nimport useDecodeURIFetch from '../hooks/useDecodeURIFetch';\r\nimport { modes } from '../lib/enums';\r\nimport { IAnswer } from '../lib/interfaces';\r\nimport QuestionCard from './QuestionCard';\r\nimport ResultsCard from './ResultsCard';\r\nimport useTimer from '../hooks/useTimer';\r\nimport TimerBar from './TimerBar';\r\nimport LifeBar from './LifeBar';\r\nimport { RiArrowGoBackFill } from 'react-icons/ri';\r\n\r\ninterface IProps {\r\n    url: string;\r\n    mode: modes;\r\n}\r\n\r\nconst Quiz: React.FC<IProps> = ({ url, mode }) => {\r\n    // --- States ---\r\n    const [questions, error] = useDecodeURIFetch(url);\r\n    const [index, setIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [userAnswers, setUserAnswers] = useState<IAnswer[]>([]);\r\n\r\n    // --- State - Timed Mode ---\r\n    const [timeRemaining, isTimerRunning, startTimer, stopTimer, resetTimer] = useTimer(20, () =>\r\n        checkAnswer('')\r\n    );\r\n\r\n    // --- State - Marathon Mode ---\r\n    const [lives, setLives] = useState(5);\r\n\r\n    // --- Context ---\r\n    const { navigateToMainMenu } = useMainContext();\r\n\r\n    // --- Functions ---\r\n    const checkAnswer = (answer: string): void => {\r\n        // Guard clause for possible undefined value\r\n        if (!questions) return;\r\n\r\n        const correct = questions[index].correct_answer === answer;\r\n        if (correct) {\r\n            addScore();\r\n        }\r\n\r\n        if (!correct && mode === modes.Marathon) {\r\n            const newLives = lives - 1;\r\n            if (newLives >= 0) setLives(newLives);\r\n            else setGameOver(true);\r\n        }\r\n\r\n        const answerObj = {\r\n            question: questions[index].question,\r\n            answer,\r\n            correct,\r\n            correctAnswer: questions[index].correct_answer,\r\n        };\r\n        setUserAnswers((prev) => [...prev, answerObj]);\r\n\r\n        setTimeout(() => {\r\n            nextQuestion();\r\n        }, 1000);\r\n    };\r\n\r\n    const nextQuestion = (): void => {\r\n        const newIndex = index + 1;\r\n\r\n        if (questions && newIndex < questions.length) {\r\n            setIndex(newIndex);\r\n        } else {\r\n            setGameOver(true);\r\n        }\r\n    };\r\n\r\n    const addScore = () => {\r\n        switch (mode) {\r\n            case modes.Standard:\r\n                setScore((prev) => prev + 1);\r\n                break;\r\n\r\n            case modes.Time:\r\n                setScore((prev) => prev + Math.max(0, timeRemaining));\r\n                break;\r\n\r\n            case modes.Marathon:\r\n                setScore((prev) => prev + lives * 5);\r\n                break;\r\n\r\n            default:\r\n                throw new Error('No matching mode found!');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mode === modes.Time) {\r\n            resetTimer();\r\n            startTimer();\r\n        }\r\n    }, [index]);\r\n\r\n    // --- Render ---\r\n    if (error) {\r\n        return (\r\n            <div>\r\n                <h1>{error.message}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!questions) {\r\n        return (\r\n            <div>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (gameOver) {\r\n        return (\r\n            <ResultsCard\r\n                score={score}\r\n                userAnswers={userAnswers}\r\n                navigateBack={navigateToMainMenu}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='relative flex flex-col h-full w-full max-w-screen-md max-h-screen-lg overflow-hidden bg-gray-200'>\r\n            <QuestionCard\r\n                question={questions[index]}\r\n                userAnswer={userAnswers[index]}\r\n                questionNum={index + 1}\r\n                questionCount={questions.length}\r\n                callback={checkAnswer}\r\n            />\r\n\r\n            {/* Marathon Mode Components */}\r\n            {mode === modes.Marathon && <LifeBar currentLives={lives} maxLives={5} />}\r\n\r\n            <div className='flex flex-row justify-around text-2xl sm:text-3xl md:text-4xl w-1/2 mx-auto py-0 sm:py-1 md:py-2 rounded-t-full bg-gray-800 text-gray-100 '>\r\n                <h4>{score}</h4>\r\n            </div>\r\n\r\n            {/* Time Mode Components */}\r\n            {mode === modes.Time && <TimerBar currentTime={timeRemaining} maxTime={20} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quiz;\r\n","import MainMenu from './MainMenu';\r\nimport Options from './Options';\r\nimport Quiz from './Quiz';\r\nimport { components } from '../lib/enums';\r\nimport { useMainContext } from '../hooks/mainContext';\r\n\r\n// The navigator of the app.\r\n// Displays the correct component based on the activeComponent state.\r\nfunction App() {\r\n    const { activeComponent, fetchURL, gameMode } = useMainContext();\r\n    return (\r\n        <main className='h-screen w-screen flex justify-center items-center'>\r\n            {activeComponent === components.Main_Menu && <MainMenu />}\r\n            {activeComponent === components.Options && <Options />}\r\n            {activeComponent === components.Quiz && <Quiz url={fetchURL} mode={gameMode} />}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport AppProvider from './hooks/mainContext';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}