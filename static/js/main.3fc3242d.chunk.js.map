{"version":3,"sources":["lib/enums.ts","hooks/mainContext.tsx","components/MainMenu.tsx","hooks/useFetch.ts","components/Options.tsx","hooks/useDecodeURIFetch.ts","lib/utils.ts","components/QuestionCard.tsx","components/ResultsCard.tsx","hooks/useTimer.ts","components/Quiz.tsx","components/App.tsx","index.tsx"],"names":["modes","components","AppContext","React","createContext","useMainContext","useContext","AppProvider","children","useState","Main_Menu","activeComponent","setActiveComponent","category","difficulty","type","amount","gameOptions","setGameOptions","fetchURL","setFetchURL","Standard","gameMode","setGameMode","getFetchURL","paramsObj","encode","params","URLSearchParams","console","log","Provider","value","navigateToMainMenu","navigateToOptions","Options","navigateToQuiz","mode","Quiz","Marathon","updateGameOptions","MainMenu","className","onClick","Time","useFetch","url","options","cache","useRef","cancelRequest","initialState","error","undefined","data","useReducer","state","action","payload","dispatch","useEffect","fetchData","a","current","fetch","response","ok","Error","statusText","json","setOptions","htmlFor","id","onChange","e","target","trivia_categories","map","name","parseInt","useDecodeURIFetch","decodedData","setDecodedData","decoded","results","question","decodeURIComponent","correct_answer","incorrect_answers","answer","item","shuffled_answers","array","sort","Math","random","QuestionCard","userAnswer","callback","index","disabled","currentTarget","ResultsCard","score","userAnswers","correctAnswer","useTimer","duration","timeRemaining","setTimeRemaining","isRunning","setIsRunning","timerRef","callbackRef","stop","window","setInterval","time","clearInterval","questions","setIndex","setScore","gameOver","setGameOver","setUserAnswers","checkAnswer","isTimerRunning","startTimer","resetTimer","lives","setLives","correct","addScore","newLives","answerObj","prev","setTimeout","nextQuestion","newIndex","length","max","message","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fc3242d.chunk.js","sourcesContent":["enum modes {\r\n    Standard = 'STANDARD',\r\n    Time = 'TIME',\r\n    Marathon = 'MARATHON',\r\n}\r\n\r\nenum components {\r\n    Main_Menu = 'Main_Menu',\r\n    Options = 'Options',\r\n    Quiz = 'Quiz',\r\n}\r\n\r\nexport { modes, components };\r\n","import React, { useContext, useState } from 'react';\r\nimport { components } from '../lib/enums';\r\nimport { IGameOptions } from '../lib/interfaces';\r\nimport { modes } from '../lib/enums';\r\n\r\ntype ContextType = {\r\n    activeComponent: components;\r\n    gameOptions: IGameOptions;\r\n    fetchURL: string;\r\n    gameMode: modes;\r\n    navigateToMainMenu: () => void;\r\n    navigateToOptions: () => void;\r\n    navigateToQuiz: (mode: modes) => void;\r\n    updateGameOptions: (gameOptions: IGameOptions) => void;\r\n};\r\n\r\nconst AppContext = React.createContext<ContextType | null>(null);\r\n\r\nconst AppProvider: React.FC<React.ReactNode> = ({ children }) => {\r\n    const [activeComponent, setActiveComponent] = useState(components.Main_Menu);\r\n    const [gameOptions, setGameOptions] = useState<IGameOptions>({\r\n        category: '',\r\n        difficulty: '',\r\n        type: '',\r\n        amount: 10,\r\n    });\r\n    const [fetchURL, setFetchURL] = useState(\r\n        'https://opentdb.com/api.php?amount=10&encode=url3986'\r\n    );\r\n    const [gameMode, setGameMode] = useState(modes.Standard);\r\n\r\n    const navigateToMainMenu = (): void => {\r\n        setActiveComponent(components.Main_Menu);\r\n    };\r\n\r\n    const navigateToOptions = (): void => {\r\n        setActiveComponent(components.Options);\r\n    };\r\n\r\n    const navigateToQuiz = (mode: modes): void => {\r\n        setActiveComponent(components.Quiz);\r\n        setGameMode(mode);\r\n\r\n        if (mode === modes.Marathon) {\r\n            setFetchURL(\r\n                getFetchURL({ ...gameOptions, category: '', type: 'multiple', amount: 50 })\r\n            );\r\n        }\r\n    };\r\n\r\n    const updateGameOptions = (gameOptions: IGameOptions) => {\r\n        setGameOptions(gameOptions);\r\n        setFetchURL(getFetchURL(gameOptions));\r\n    };\r\n\r\n    const getFetchURL = (gameOptions: IGameOptions): string => {\r\n        let paramsObj = {};\r\n\r\n        if (gameOptions.category) paramsObj = { ...paramsObj, category: gameOptions.category };\r\n        if (gameOptions.difficulty)\r\n            paramsObj = { ...paramsObj, difficulty: gameOptions.difficulty };\r\n        if (gameOptions.type) paramsObj = { ...paramsObj, type: gameOptions.type };\r\n        paramsObj = { ...paramsObj, amount: gameOptions.amount };\r\n        paramsObj = { ...paramsObj, encode: 'url3986' };\r\n        const params = new URLSearchParams(paramsObj);\r\n\r\n        console.log(`https://opentdb.com/api.php?${params}`);\r\n        return `https://opentdb.com/api.php?${params}`;\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                activeComponent,\r\n                gameOptions,\r\n                fetchURL,\r\n                gameMode,\r\n                navigateToMainMenu,\r\n                navigateToOptions,\r\n                navigateToQuiz,\r\n                updateGameOptions,\r\n            }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMainContext = () => {\r\n    return useContext(AppContext) as ContextType;\r\n};\r\n\r\nexport default AppProvider;\r\n","import { useMainContext } from '../hooks/mainContext';\r\nimport { modes } from '../lib/enums';\r\n\r\nconst MainMenu: React.FC = () => {\r\n    const { navigateToQuiz, navigateToOptions } = useMainContext();\r\n\r\n    return (\r\n        <section className='main-menu'>\r\n            <h1>Trivia Quiz</h1>\r\n            <button onClick={() => navigateToQuiz(modes.Standard)}>Standard</button>\r\n            <button onClick={() => navigateToQuiz(modes.Time)}>Timed</button>\r\n            <button onClick={() => navigateToQuiz(modes.Marathon)}>Marathon</button>\r\n            <button onClick={navigateToOptions}>Options</button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","import { useRef, useEffect, useReducer } from 'react';\r\n\r\n// -- Interfaces & Types --\r\ninterface IState<T> {\r\n    data?: T;\r\n    error?: Error;\r\n}\r\n\r\ntype Cache<T> = { [url: string]: T };\r\n\r\n// discriminated union type\r\ntype Action<T> =\r\n    | { type: 'loading' }\r\n    | { type: 'fetched'; payload: T }\r\n    | { type: 'error'; payload: Error };\r\n\r\nconst useFetch = <T = unknown>(url?: string, options?: RequestInit): IState<T> => {\r\n    const cache = useRef<Cache<T>>({});\r\n\r\n    // Used to prevent state update if the component is unmounted\r\n    const cancelRequest = useRef<boolean>(false);\r\n\r\n    const initialState: IState<T> = {\r\n        error: undefined,\r\n        data: undefined,\r\n    };\r\n\r\n    // Keep state logic separated\r\n    const fetchReducer = (state: IState<T>, action: Action<T>): IState<T> => {\r\n        switch (action.type) {\r\n            case 'loading':\r\n                return { ...initialState };\r\n\r\n            case 'fetched':\r\n                return { ...initialState, data: action.payload };\r\n\r\n            case 'error':\r\n                return { ...initialState, error: action.payload };\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        // Do nothing if the url is null\r\n        if (!url) return;\r\n\r\n        // Create our async fetch function\r\n        const fetchData = async () => {\r\n            dispatch({ type: 'loading' });\r\n\r\n            // If a cache exists for this url, return it\r\n            if (cache.current[url]) {\r\n                dispatch({ type: 'fetched', payload: cache.current[url] });\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch(url, options);\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const data = (await response.json()) as T;\r\n                cache.current[url] = data;\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'fetched', payload: data });\r\n            } catch (error) {\r\n                if (cancelRequest.current) return;\r\n\r\n                dispatch({ type: 'error', payload: error as Error });\r\n            }\r\n        };\r\n\r\n        // invoke fetch function after construction;\r\n        void fetchData();\r\n        /* \r\n            Use the cleanup function for avoiding a possible\r\n            state update after the component unmounts\r\n        */\r\n        return () => {\r\n            cancelRequest.current = true;\r\n        };\r\n    }, [url]);\r\n\r\n    return state;\r\n};\r\n\r\nexport default useFetch;\r\n","import { useState } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { ICategories } from '../lib/interfaces';\r\n\r\nconst Options: React.FC = () => {\r\n    const { data, error } = useFetch<ICategories>('https://opentdb.com/api_category.php');\r\n    const { gameOptions, navigateToMainMenu, updateGameOptions } = useMainContext();\r\n    const [options, setOptions] = useState(gameOptions);\r\n\r\n    const returnToMainMenu = () => {\r\n        updateGameOptions(options);\r\n        navigateToMainMenu();\r\n    };\r\n\r\n    return (\r\n        <section className='mode-options'>\r\n            <div>\r\n                <label htmlFor='categories'>Select Category</label>\r\n                <select\r\n                    id='categories'\r\n                    value={options.category}\r\n                    onChange={(e) => setOptions({ ...options, category: e.target.value })}>\r\n                    <option value=''>Any Category</option>\r\n                    {data &&\r\n                        data.trivia_categories.map((category) => {\r\n                            return <option value={category.id}>{category.name}</option>;\r\n                        })}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='difficulty'>Select Difficulty</label>\r\n                <select\r\n                    id='difficulty'\r\n                    value={options.difficulty}\r\n                    onChange={(e) => setOptions({ ...options, difficulty: e.target.value })}>\r\n                    <option value=''>Any Difficulty</option>\r\n                    <option value='easy'>Easy</option>\r\n                    <option value='medium'>Medium</option>\r\n                    <option value='hard'>Hard</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='type'>Select Type</label>\r\n                <select\r\n                    id='type'\r\n                    value={options.type}\r\n                    onChange={(e) => setOptions({ ...options, type: e.target.value })}>\r\n                    <option value=''>Any Type</option>\r\n                    <option value='multiple'>Multiple Choice</option>\r\n                    <option value='boolean'>True / False</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label htmlFor='number'>Select Number of Questions</label>\r\n                <select\r\n                    id='number'\r\n                    value={options.amount}\r\n                    onChange={(e) =>\r\n                        setOptions({\r\n                            ...options,\r\n                            amount: parseInt(e.target.value),\r\n                        })\r\n                    }>\r\n                    <option value={10}>10</option>\r\n                    <option value={15}>15</option>\r\n                    <option value={20}>20</option>\r\n                </select>\r\n            </div>\r\n            <button onClick={returnToMainMenu}>Back</button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Options;\r\n","import React, { useEffect, useState } from 'react';\r\nimport useFetch from './useFetch';\r\nimport { decodeURIQuestions, shuffleArray } from '../lib/utils';\r\nimport { IQuestion, IQuestions } from '../lib/interfaces';\r\n\r\nconst useDecodeURIFetch = (url?: string, options?: RequestInit) => {\r\n    const { data, error } = useFetch<IQuestions>(url, options);\r\n    const [decodedData, setDecodedData] = useState<IQuestion[]>();\r\n\r\n    useEffect(() => {\r\n        if (!data) return;\r\n\r\n        const decoded = decodeURIQuestions(data);\r\n        setDecodedData(\r\n            decoded.map((item) => {\r\n                return {\r\n                    ...item,\r\n                    shuffled_answers: shuffleArray([\r\n                        ...item.incorrect_answers,\r\n                        item.correct_answer,\r\n                    ]),\r\n                };\r\n            })\r\n        );\r\n    }, [data]);\r\n\r\n    return [decodedData, error] as const;\r\n};\r\n\r\nexport default useDecodeURIFetch;\r\n","import { IQuestion, IQuestions } from './interfaces';\r\n\r\nexport const shuffleArray = (array: any[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n\r\nexport const decodeURIQuestions = (questions: IQuestions): IQuestion[] => {\r\n    return questions.results.map((question) => {\r\n        return {\r\n            ...question,\r\n            category: decodeURIComponent(question.category),\r\n            question: decodeURIComponent(question.question),\r\n            correct_answer: decodeURIComponent(question.correct_answer),\r\n            incorrect_answers: question.incorrect_answers.map((answer) => {\r\n                return decodeURIComponent(answer);\r\n            }),\r\n        };\r\n    });\r\n};\r\n","import React from 'react';\r\nimport { IAnswer, IQuestion } from '../lib/interfaces';\r\n\r\ninterface IProps {\r\n    question: IQuestion;\r\n    userAnswer: IAnswer | undefined;\r\n    callback: (answer: string) => void;\r\n}\r\n\r\nconst QuestionCard: React.FC<IProps> = ({ question, userAnswer, callback }) => {\r\n    return (\r\n        <div>\r\n            <h1>{question.question}</h1>\r\n            {question.shuffled_answers?.map((item, index) => {\r\n                return (\r\n                    <button\r\n                        key={index}\r\n                        value={item}\r\n                        disabled={userAnswer ? true : false}\r\n                        onClick={(e) => callback(e.currentTarget.value)}>\r\n                        {item}\r\n                    </button>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from 'react';\r\nimport { IAnswer } from '../lib/interfaces';\r\n\r\ninterface IProps {\r\n    score: number;\r\n    userAnswers: IAnswer[];\r\n}\r\n\r\nconst ResultsCard: React.FC<IProps> = ({ score, userAnswers }) => {\r\n    return (\r\n        <div>\r\n            <h2>Your Final Score</h2>\r\n            <h3>{score}</h3>\r\n            {userAnswers.map((item, index) => {\r\n                return (\r\n                    <div key={index}>\r\n                        <h3>Question:- {item.question}</h3>\r\n                        <h4>Your Answer:- {item.answer}</h4>\r\n                        <h4>Correct Answer:- {item.correctAnswer}</h4>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsCard;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst useTimer = (duration: number, callback: () => void) => {\r\n    const [timeRemaining, setTimeRemaining] = useState(duration);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const timerRef = useRef<number>();\r\n    const callbackRef = useRef<() => void>();\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n    };\r\n\r\n    const stop = () => {\r\n        setIsRunning(false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setTimeRemaining(duration);\r\n        setIsRunning(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        callbackRef.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        if (isRunning) {\r\n            timerRef.current = window.setInterval(() => {\r\n                const time = timeRemaining - 1;\r\n                if (time >= 0) {\r\n                    setTimeRemaining(time);\r\n                } else {\r\n                    callbackRef.current && callbackRef.current();\r\n                    stop();\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        return () => window.clearInterval(timerRef.current);\r\n    }, [isRunning, timeRemaining]);\r\n\r\n    return [timeRemaining, isRunning, start, stop, reset] as const;\r\n};\r\n\r\nexport default useTimer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useMainContext } from '../hooks/mainContext';\r\nimport useDecodeURIFetch from '../hooks/useDecodeURIFetch';\r\nimport { modes } from '../lib/enums';\r\nimport { IAnswer } from '../lib/interfaces';\r\nimport QuestionCard from './QuestionCard';\r\nimport ResultsCard from './ResultsCard';\r\nimport useTimer from '../hooks/useTimer';\r\n\r\ninterface IProps {\r\n    url: string;\r\n    mode: modes;\r\n}\r\n\r\nconst Quiz: React.FC<IProps> = ({ url, mode }) => {\r\n    // --- States ---\r\n    const [questions, error] = useDecodeURIFetch(url);\r\n    const [index, setIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [userAnswers, setUserAnswers] = useState<IAnswer[]>([]);\r\n\r\n    // --- State - Timed Mode ---\r\n    const [timeRemaining, isTimerRunning, startTimer, stopTimer, resetTimer] = useTimer(20, () =>\r\n        checkAnswer('')\r\n    );\r\n\r\n    // --- State - Marathon Mode ---\r\n    const [lives, setLives] = useState(5);\r\n\r\n    // --- Context ---\r\n    const { navigateToMainMenu } = useMainContext();\r\n\r\n    // --- Functions ---\r\n    const checkAnswer = (answer: string): void => {\r\n        // Guard clause for possible undefined value\r\n        if (!questions) return;\r\n\r\n        const correct = questions[index].correct_answer === answer;\r\n        if (correct) {\r\n            addScore();\r\n        }\r\n\r\n        if (!correct && mode === modes.Marathon) {\r\n            const newLives = lives - 1;\r\n            if (newLives >= 0) setLives(newLives);\r\n            else setGameOver(true);\r\n        }\r\n\r\n        const answerObj = {\r\n            question: questions[index].question,\r\n            answer,\r\n            correct,\r\n            correctAnswer: questions[index].correct_answer,\r\n        };\r\n        setUserAnswers((prev) => [...prev, answerObj]);\r\n\r\n        setTimeout(() => {\r\n            nextQuestion();\r\n        }, 500);\r\n    };\r\n\r\n    const nextQuestion = (): void => {\r\n        const newIndex = index + 1;\r\n\r\n        if (questions && newIndex < questions.length) {\r\n            setIndex(newIndex);\r\n        } else {\r\n            setGameOver(true);\r\n        }\r\n    };\r\n\r\n    const addScore = () => {\r\n        switch (mode) {\r\n            case modes.Standard:\r\n                setScore((prev) => prev + 1);\r\n                break;\r\n\r\n            case modes.Time:\r\n                setScore((prev) => prev + Math.max(0, timeRemaining));\r\n                break;\r\n\r\n            case modes.Marathon:\r\n                setScore((prev) => prev + lives * 5);\r\n                break;\r\n\r\n            default:\r\n                throw new Error('No matching mode found!');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mode === modes.Time && !isTimerRunning) {\r\n            resetTimer();\r\n            startTimer();\r\n        }\r\n    }, [index]);\r\n\r\n    // --- Render ---\r\n    if (error) {\r\n        return (\r\n            <div>\r\n                <h1>{error.message}</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!questions) {\r\n        return (\r\n            <div>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (gameOver) {\r\n        return (\r\n            <div>\r\n                <ResultsCard score={score} userAnswers={userAnswers} />\r\n                <button onClick={navigateToMainMenu}>Back</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (mode === modes.Standard) {\r\n        return (\r\n            <div>\r\n                <h4>\r\n                    {index + 1} / {questions.length}\r\n                </h4>\r\n                <h4>Score:- {score}</h4>\r\n                <QuestionCard\r\n                    question={questions[index]}\r\n                    userAnswer={userAnswers[index]}\r\n                    callback={checkAnswer}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (mode === modes.Time) {\r\n        return (\r\n            <div>\r\n                <h4>\r\n                    {index + 1} / {questions.length}\r\n                </h4>\r\n                <h4>Score:- {score}</h4>\r\n                <div className='progressbar-container'>\r\n                    <div className='progressbar-filler'>\r\n                        <span className='progressbar-label'>{timeRemaining}</span>\r\n                    </div>\r\n                </div>\r\n                <QuestionCard\r\n                    question={questions[index]}\r\n                    userAnswer={userAnswers[index]}\r\n                    callback={checkAnswer}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (mode === modes.Marathon) {\r\n        return (\r\n            <div>\r\n                <h4>\r\n                    {index + 1} / {questions.length}\r\n                </h4>\r\n                <h4>Score:- {score}</h4>\r\n                <h5>{lives}</h5>\r\n                <QuestionCard\r\n                    question={questions[index]}\r\n                    userAnswer={userAnswers[index]}\r\n                    callback={checkAnswer}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <div></div>;\r\n};\r\n\r\nexport default Quiz;\r\n","import MainMenu from './MainMenu';\r\nimport Options from './Options';\r\nimport Quiz from './Quiz';\r\nimport { components } from '../lib/enums';\r\nimport { useMainContext } from '../hooks/mainContext';\r\n\r\n// The navigator of the app.\r\n// Displays the correct component based on the activeComponent state.\r\nfunction App() {\r\n    const { activeComponent, fetchURL, gameMode } = useMainContext();\r\n    return (\r\n        <main>\r\n            {activeComponent === components.Main_Menu && <MainMenu />}\r\n            {activeComponent === components.Options && <Options />}\r\n            {activeComponent === components.Quiz && <Quiz url={fetchURL} mode={gameMode} />}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport AppProvider from './hooks/mainContext';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}